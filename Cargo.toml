[package]
name = "volume-viewer"
version = "0.1.0"
authors = ["Lukas Herzberger <herzberger.lukas@gmail.com>"]
description = "A viewer for large-scale volumetric data"
repository = "https://github.com/JolifantoBambla/volume-viewer"
license = "MIT"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[workspace]
members = ["crates/*"]

[features]
page-table-only = []
default = [
    "console_error_panic_hook"
]

[target.wasm32-unknown-unknown]
runner = 'wasm-bindgen-test-runner'

[dependencies]
bytemuck = { version = "1.11.0", features = ["derive", "extern_crate_alloc"] }
futures = "0.3.21"
futures-intrusive = "0.4.0"
glam = { version = "0.22.0", features = ["bytemuck", "serde"] }
gloo-timers = "0.2.6"
instant = "0.1.12"
js-sys = "0.3.57"
log = "0.4.17"
modular-bitfield = "0.11.2"
rayon = "1.5.3"
readonly = "0.2.0"
regex = "1.6.0"
reqwest = "0.11.10"
send_wrapper = "0.6.0"
serde = "1.0.137"
serde_json = "1.0.81"
serde-wasm-bindgen = "0.4.3"
wasm-bindgen = { version = "0.2.63", features = ["serde-serialize"] }
wasm-bindgen-futures = "0.4.30"
wasm-bindgen-rayon = { version = "1.0.3", features = ["no-bundler"] }
wasm-logger = "0.2.0"
web-sys = { version = "^0.3.64", features = ["Document", "HtmlCanvasElement", "HtmlInputElement", "Gpu", "GpuDevice", "OffscreenCanvas", "Performance", "Window", "Event", "EventInit", "CustomEvent", "CustomEventInit","EventTarget", "WorkerNavigator"] }
winit = "0.27.5"

ome-zarr = { path = "crates/ome-zarr" }
numcodecs-wasm = { path = "crates/numcodecs-wasm" }
wgsl-preprocessor = { path = "crates/wgsl-preprocessor" }
zarr-wasm = { path = "crates/zarr-wasm" }
include_preprocessed_wgsl = { path = "crates/include_preprocessed_wgsl" }
wgpu-framework = { path = "crates/wgpu-framework" }
# blosc = "0.1.3" doesn't work out of the box, maybe try this later

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }
proc-macro2 = "1.0.70"
wgpu = "0.18.0"

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
